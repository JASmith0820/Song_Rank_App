y <- c(3, 2, 3, 5, 4, 5, 5, 6, 7, 7, 9, 9)
q6model = lm(y~x)
summary(q6model)
confint(q6model)
confint(q6model, level=.9)
summary(q6model)
confint(q6model)
confint(q6model, level=.9)
confint(q6model, level=.9)
model.car = aov(y~x)
summary(model.car)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3)
y <- c(4,8,6,9,8,2,5,3,7,1,6,7,7,8,6)
model.meds = aov(y~x)
summary(model.meds)
summarize(y~x)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
y <- (8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
y <- c(8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
y <- c(8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
model.test = aov(y~x)
summary(model.test)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3)
y <- c(820, 820, 825, 835, 825, 840, 825, 815, 855, 840, 785, 775, 770, 760, 770)
#model.car = aov(noise.level~car.size, data=car.data)
model.car = aov(y~x)
summary(model.car)
print(x)
print(y)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
y <- c(8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
print(y)
model.test = aov(y~x)
summary(model.test)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
y <- c(8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
testing <- data.frame(y,x)
print(testing)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
y <- c(8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
testing <- data.frame(y,x)
#print(testing)
model.test = aov(y~x, data=testing)
summary(model.test)
x <- c(rep("A",5),rep("B",5),rep("C",5), rep("D",5))
y <- c(8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
testing <- data.frame(y,x)
print(testing)
model.test = aov(y~x, data=testing)
summary(model.test)
x <- c(rep("A",5),rep("B",5),rep("C",5))
y <- c(4,8,6,9,8,2,5,3,7,1,6,7,7,8,6)
model.meds = aov(y~x)
summary(model.meds)
Training <- c(22, 18, 30, 16, 25, 20, 10, 14)
Time <- c(18.4,19.2,14.5,19,16.6,17.7,24.4,21)
plot(Training,Time)
cor(Training,Time)
model1 = lm(Time ~ Training)
summary(model1)
x <- c(92,116, 124, 210, 216, 267, 306, 378, 415, 502, 615, 703)
y <- c(3, 2, 3, 5, 4, 5, 5, 6, 7, 7, 9, 9)
q6model = lm(y~x)
summary(q6model)
confint(q6model, level=.9)
summary(q6model)
aov(y~x)
aov(q6model)
anova(q6model, test = "F")
anova(aov, test = "F")
x <- c(1,2,1,3,2,4,3,5,5,6)
y <- c(1,1,2,2,3,3,4,4,5,5)
#Testing on example of advertising expenditures
x <- c(1,2,1,3,2,4,3,5,5,6)
y <- c(1,1,2,2,3,3,4,4,5,5)
model2 <- lm(y~x)
summary(model2)
predict(model2,list(x=4))
predict(model2,list(x=4), interval='predict')
predict(model2,list(x=4), interval='predict', level=.9)
predict(model2,4, interval='predict', level=.9)
predict(model2,list(x=4), interval='predict', level=.9)
predict(model2,list(x=4), interval='confidence', level=.95)
anova(q6model, test = "F")
model.test = aov(y~x, data=testing)
summary(model.test)
library(ggplot2)
df1 <- read.csv('billboardhot100_vs_shazamtop100.csv', header=T) # Read csv file into data frame
x <- df1$billboard_rank
y <- df1$shazam_rank
# Source of linear equation label on plot with r-squared coefficient: http://goo.gl/K4yh and
# http://stackoverflow.com/questions/7549694/ggplot2-adding-regression-line-equation-and-r2-on-graph
# This code calculates equation of the line for use in the plot
lm_eqn <- function(df1){
m <- lm(y ~ x, df1);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
# Plot correlation of Billboard song rank (x-axis) vs. Shazam song rank (y-axis)
s1 = 10    # Size of point labels in plot
s2 = 2     # Size of points themselves
s3 = 3     # Size of equation in plot
ggplot(df1, aes(x=billboard_rank, y=shazam_rank, label=song))+
geom_point(aes(color=artist), size=s2)+
geom_text(aes(label=song, color=artist, size=s1),hjust=-0.15, vjust=0.5)+
geom_text(aes(label=artist, color=artist, size=s1),hjust=-0.15, vjust=-.5)+
geom_text(aes(label=paste0('(',billboard_rank,',',shazam_rank,')'), color=artist,
size=s1, hjust=1.3, vjust=0))+
geom_text(x = 4, y = 22, label = lm_eqn(df1), color='blue', size=s3, parse = TRUE)+
labs(title="Figure 1: Billboard Hot 100 vs. Shazam Top 100")+
labs(x="Billboard Song Rank", y="Shazam Song Rank")+
geom_smooth(method="lm", fullrange=TRUE, size=.5, se=TRUE, level=.95, alpha=0.18)+
theme_bw()+
xlim(-5, 50)+
ylim(-5, 45)+
theme(legend.position="none")
setwd('/home/vagrant/Programming_For_Analytics/Homework/Group_Project_Final_changed')
# DNSC 6203 Group Project - R Code for Plotting Song Rank Correlations
# Jessica Smith, Yahui Zhou, and Andrew Nichols
# 25 November 2015
# PLEASE SET THE WORKING DIRECTORY so that this code
# can access the files that were generated by the Python code in
# step 1 of the workflow.
# setwd("/home/vagrant/Programming_For_Analytics/Homework/Group_Project_Final")
#-----------PART 1: CORRELATION PLOTS---------------------------------
# install.packages(c('ggplot2')  # Install this if you haven't already
library(ggplot2)
#Plot #1: How do Billboard Hot 100 rankings correlate with Shazam Top 100 rankings?
df1 <- read.csv('billboardhot100_vs_shazamtop100.csv', header=T) # Read csv file into data frame
x <- df1$billboard_rank
y <- df1$shazam_rank
# Source of linear equation label on plot with r-squared coefficient: http://goo.gl/K4yh and
# http://stackoverflow.com/questions/7549694/ggplot2-adding-regression-line-equation-and-r2-on-graph
# This code calculates equation of the line for use in the plot
lm_eqn <- function(df1){
m <- lm(y ~ x, df1);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
# Plot correlation of Billboard song rank (x-axis) vs. Shazam song rank (y-axis)
s1 = 10    # Size of point labels in plot
s2 = 2     # Size of points themselves
s3 = 3     # Size of equation in plot
ggplot(df1, aes(x=billboard_rank, y=shazam_rank, label=song))+
geom_point(aes(color=artist), size=s2)+
geom_text(aes(label=song, color=artist, size=s1),hjust=-0.15, vjust=0.5)+
geom_text(aes(label=artist, color=artist, size=s1),hjust=-0.15, vjust=-.5)+
geom_text(aes(label=paste0('(',billboard_rank,',',shazam_rank,')'), color=artist,
size=s1, hjust=1.3, vjust=0))+
geom_text(x = 4, y = 22, label = lm_eqn(df1), color='blue', size=s3, parse = TRUE)+
labs(title="Figure 1: Billboard Hot 100 vs. Shazam Top 100")+
labs(x="Billboard Song Rank", y="Shazam Song Rank")+
geom_smooth(method="lm", fullrange=TRUE, size=.5, se=TRUE, level=.95, alpha=0.18)+
theme_bw()+
xlim(-5, 50)+
ylim(-5, 45)+
theme(legend.position="none")
dev.copy(png, file="BillboardHot100_vs_ShazamTop100.png", width=480, height=480, bg="White")
dev.off()
dev.copy(pdf, file="BillboardHot100_vs_ShazamTop100.pdf", bg="White")
dev.off()
#Plot #2: Does the shazam hit predictor accurately predict hits on the billboard hot 100?
df2 <- read.csv('shazamhitpredictor_vs_billboardhot100.csv', header=T) # Read csv file into data frame
numHits <- length(which(df2$hit==1))
numNotHits <- length(which(df2$hit==2))
hitData <- c(numHits,numNotHits)
pct <- round(hitData/sum(hitData)*100)
hitLabels <- c('Hit','Not a hit')
hitLabels <- paste(hitLabels, pct)
hitLabels <- paste(hitLabels, "%",sep="")
colors <- c("forestgreen","firebrick")
pie(hitData, labels = hitLabels, col = colors
,main = "Percent of Shazam Predicted Hits in \nBillboard Hot 100"
,cex = 1.2
,cex.main = 1)
dev.copy(png, file="Hit_Predictor_vs_Top_100.png", width=480, height=480, bg="White")
dev.off()
dev.copy(pdf, file="Hit_Predictor_vs_Top_100.pdf", bg="White")
dev.off()
#Plot #3: Does the billboard top trending list predict future hits on the billboard hot 100?
df3 <- read.csv('billboardtoptrending_vs_billboardhot100.csv', header=T) # Read csv file into data frame
numHits <- length(which(df3$hit==1))
numNotHits <- length(which(df3$hit==2))
hitData <- c(numHits,numNotHits)
pct <- round(hitData/sum(hitData)*100)
hitLabels <- c('Hit','Not a hit')
hitLabels <- paste(hitLabels, pct)
hitLabels <- paste(hitLabels, "%",sep="")
colors <- c("forestgreen","firebrick")
pie(hitData, labels = hitLabels, col = colors
,main = "Percent of Billboard Top Trending in \nBillboard Hot 100"
,cex = 1.2
,cex.main = 1)
dev.copy(png, file="Top_Trending_vs_Top_100.png", width=480, height=480, bg="White")
dev.off()
dev.copy(pdf, file="Top_Trending_vs_Top_100.pdf", bg="White")
dev.off()
#-----------PART 2: MAP OF ARTISTS' HOMETOWNS-----------------------------
library(ggmap)
# Need list of singers and their hometowns
mydata = read.csv("location.csv", header=FALSE, stringsAsFactors=FALSE)
locn <- mydata$V2
locn_coords <- geocode(locn, source="google")
where.df <- data.frame(locn=mydata$V1)
myLocs <- data.frame(where.df, locn_coords)
# Get the map
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50", boundary=TRUE)
mp <- ggplot() + mapWorld
# Layer the cities on top
mp <- mp+ geom_point(data = myLocs, aes(x=lon, y=lat, colour
= locn), jitter=TRUE, size=4,
alpha=0.8)
mp
dev.copy(png, file="Artist_Map.png", width=720, height=480, bg="White")
dev.off()
library(ggmap)
# Need list of singers and their hometowns
mydata = read.csv("location.csv", header=FALSE, stringsAsFactors=FALSE)
locn <- mydata$V2
locn_coords <- geocode(locn, source="google")
where.df <- data.frame(locn=mydata$V1)
myLocs <- data.frame(where.df, locn_coords)
# Get the map
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50", boundary=TRUE)
mp <- ggplot() + mapWorld
# Layer the cities on top
mp <- mp+ geom_point(data = myLocs, aes(x=lon, y=lat, colour
= locn), jitter=TRUE, size=4,
alpha=0.8)
mp
library(ggmap)
# Need list of singers and their hometowns
mydata = read.csv("location.csv", header=FALSE, stringsAsFactors=FALSE)
locn <- mydata$V2
locn_coords <- geocode(locn, source="google")
where.df <- data.frame(locn=mydata$V1)
myLocs <- data.frame(where.df, locn_coords)
# Get the map
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50", boundary=TRUE)
mp <- ggplot() + mapWorld
# Layer the cities on top
mp <- mp+ geom_point(data = myLocs, aes(x=lon, y=lat, colour
= locn), jitter=TRUE, size=4,
alpha=0.8)
mp
dev.copy(png, file="Artist_Map.png", width=720, height=480, bg="White")
dev.off()
dev.off()
dev.copy(png, file="BillboardHot100_vs_ShazamTop100.png", width=480, height=480, bg="White")
dev.off()
dev.copy(pdf, file="BillboardHot100_vs_ShazamTop100.pdf", bg="White")
dev.off()
# DNSC 6203 Group Project - R Code for Plotting Song Rank Correlations
# Jessica Smith, Yahui Zhou, and Andrew Nichols
# 25 November 2015
# PLEASE SET THE WORKING DIRECTORY so that this code
# can access the files that were generated by the Python code in
# step 1 of the workflow.
# setwd("/home/vagrant/Programming_For_Analytics/Homework/Group_Project_Final")
#-----------PART 1: CORRELATION PLOTS---------------------------------
# install.packages(c('ggplot2')  # Install this if you haven't already
library(ggplot2)
#Plot #1: How do Billboard Hot 100 rankings correlate with Shazam Top 100 rankings?
df1 <- read.csv('billboardhot100_vs_shazamtop100.csv', header=T) # Read csv file into data frame
x <- df1$billboard_rank
y <- df1$shazam_rank
# Source of linear equation label on plot with r-squared coefficient: http://goo.gl/K4yh and
# http://stackoverflow.com/questions/7549694/ggplot2-adding-regression-line-equation-and-r2-on-graph
# This code calculates equation of the line for use in the plot
lm_eqn <- function(df1){
m <- lm(y ~ x, df1);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
# Plot correlation of Billboard song rank (x-axis) vs. Shazam song rank (y-axis)
s1 = 10    # Size of point labels in plot
s2 = 2     # Size of points themselves
s3 = 3     # Size of equation in plot
ggplot(df1, aes(x=billboard_rank, y=shazam_rank, label=song))+
geom_point(aes(color=artist), size=s2)+
geom_text(aes(label=song, color=artist, size=s1),hjust=-0.15, vjust=0.5)+
geom_text(aes(label=artist, color=artist, size=s1),hjust=-0.15, vjust=-.5)+
geom_text(aes(label=paste0('(',billboard_rank,',',shazam_rank,')'), color=artist,
size=s1, hjust=1.3, vjust=0))+
geom_text(x = 4, y = 22, label = lm_eqn(df1), color='blue', size=s3, parse = TRUE)+
labs(title="Figure 1: Billboard Hot 100 vs. Shazam Top 100")+
labs(x="Billboard Song Rank", y="Shazam Song Rank")+
geom_smooth(method="lm", fullrange=TRUE, size=.5, se=TRUE, level=.95, alpha=0.18)+
theme_bw()+
xlim(-5, 50)+
ylim(-5, 45)+
theme(legend.position="none")
dev.copy(png, file="BillboardHot100_vs_ShazamTop100.png", width=480, height=480, bg="White")
dev.off()
dev.copy(pdf, file="BillboardHot100_vs_ShazamTop100.pdf", bg="White")
dev.off()
#Plot #2: Does the shazam hit predictor accurately predict hits on the billboard hot 100?
df2 <- read.csv('shazamhitpredictor_vs_billboardhot100.csv', header=T) # Read csv file into data frame
numHits <- length(which(df2$hit==1))
numNotHits <- length(which(df2$hit==2))
hitData <- c(numHits,numNotHits)
pct <- round(hitData/sum(hitData)*100)
hitLabels <- c('Hit','Not a hit')
hitLabels <- paste(hitLabels, pct)
hitLabels <- paste(hitLabels, "%",sep="")
colors <- c("forestgreen","firebrick")
pie(hitData, labels = hitLabels, col = colors
,main = "Percent of Shazam Predicted Hits in \nBillboard Hot 100"
,cex = 1.2
,cex.main = 1)
dev.copy(png, file="Hit_Predictor_vs_Top_100.png", width=480, height=480, bg="White")
dev.off()
dev.copy(pdf, file="Hit_Predictor_vs_Top_100.pdf", bg="White")
dev.off()
#Plot #3: Does the billboard top trending list predict future hits on the billboard hot 100?
df3 <- read.csv('billboardtoptrending_vs_billboardhot100.csv', header=T) # Read csv file into data frame
numHits <- length(which(df3$hit==1))
numNotHits <- length(which(df3$hit==2))
hitData <- c(numHits,numNotHits)
pct <- round(hitData/sum(hitData)*100)
hitLabels <- c('Hit','Not a hit')
hitLabels <- paste(hitLabels, pct)
hitLabels <- paste(hitLabels, "%",sep="")
colors <- c("forestgreen","firebrick")
pie(hitData, labels = hitLabels, col = colors
,main = "Percent of Billboard Top Trending in \nBillboard Hot 100"
,cex = 1.2
,cex.main = 1)
dev.copy(png, file="Top_Trending_vs_Top_100.png", width=480, height=480, bg="White")
dev.off()
dev.copy(pdf, file="Top_Trending_vs_Top_100.pdf", bg="White")
dev.off()
#-----------PART 2: MAP OF ARTISTS' HOMETOWNS-----------------------------
library(ggmap)
# Need list of singers and their hometowns
mydata = read.csv("location.csv", header=FALSE, stringsAsFactors=FALSE)
locn <- mydata$V2
locn_coords <- geocode(locn, source="google")
where.df <- data.frame(locn=mydata$V1)
myLocs <- data.frame(where.df, locn_coords)
# Get the map
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50", boundary=TRUE)
mp <- ggplot() + mapWorld
# Layer the cities on top
mp <- mp+ geom_point(data = myLocs, aes(x=lon, y=lat, colour
= locn), jitter=TRUE, size=4,
alpha=0.8)
mp
dev.copy(png, file="Artist_Map.png", width=720, height=480, bg="White")
dev.off()
# DNSC 6203 Group Project - R Code for Plotting Song Rank Correlations
# Jessica Smith, Yahui Zhou, and Andrew Nichols
# 25 November 2015
# PLEASE SET THE WORKING DIRECTORY so that this code
# can access the files that were generated by the Python code in
# step 1 of the workflow.
# setwd("/home/vagrant/Programming_For_Analytics/Homework/Group_Project_Final")
#-----------PART 1: CORRELATION PLOTS---------------------------------
# install.packages(c('ggplot2')  # Install this if you haven't already
library(ggplot2)
#Plot #1: How do Billboard Hot 100 rankings correlate with Shazam Top 100 rankings?
df1 <- read.csv('billboardhot100_vs_shazamtop100.csv', header=T) # Read csv file into data frame
x <- df1$billboard_rank
y <- df1$shazam_rank
# Source of linear equation label on plot with r-squared coefficient: http://goo.gl/K4yh and
# http://stackoverflow.com/questions/7549694/ggplot2-adding-regression-line-equation-and-r2-on-graph
# This code calculates equation of the line for use in the plot
lm_eqn <- function(df1){
m <- lm(y ~ x, df1);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
# Plot correlation of Billboard song rank (x-axis) vs. Shazam song rank (y-axis)
s1 = 10    # Size of point labels in plot
s2 = 2     # Size of points themselves
s3 = 3     # Size of equation in plot
ggplot(df1, aes(x=billboard_rank, y=shazam_rank, label=song))+
geom_point(aes(color=artist), size=s2)+
geom_text(aes(label=song, color=artist, size=s1),hjust=-0.15, vjust=0.5)+
geom_text(aes(label=artist, color=artist, size=s1),hjust=-0.15, vjust=-.5)+
geom_text(aes(label=paste0('(',billboard_rank,',',shazam_rank,')'), color=artist,
size=s1, hjust=1.3, vjust=0))+
geom_text(x = 4, y = 22, label = lm_eqn(df1), color='blue', size=s3, parse = TRUE)+
labs(title="Figure 2: Billboard Hot 100 vs. Shazam Top 100")+
labs(x="Billboard Song Rank", y="Shazam Song Rank")+
geom_smooth(method="lm", fullrange=TRUE, size=.5, se=TRUE, level=.95, alpha=0.18)+
theme_bw()+
xlim(-5, 50)+
ylim(-5, 45)+
theme(legend.position="none")
dev.copy(png, file="BillboardHot100_vs_ShazamTop100.png", width=480, height=480, bg="White")
dev.off()
dev.copy(pdf, file="BillboardHot100_vs_ShazamTop100.pdf", bg="White")
dev.off()
#Plot #2: Does the shazam hit predictor accurately predict hits on the billboard hot 100?
df2 <- read.csv('shazamhitpredictor_vs_billboardhot100.csv', header=T) # Read csv file into data frame
numHits <- length(which(df2$hit==1))
numNotHits <- length(which(df2$hit==2))
hitData <- c(numHits,numNotHits)
pct <- round(hitData/sum(hitData)*100)
hitLabels <- c('Hit','Not a hit')
hitLabels <- paste(hitLabels, pct)
hitLabels <- paste(hitLabels, "%",sep="")
colors <- c("forestgreen","firebrick")
pie(hitData, labels = hitLabels, col = colors
,main = "Figure 3: Percent of Shazam Predicted Hits in \nBillboard Hot 100"
,cex = 1.2
,cex.main = 1)
dev.copy(png, file="Hit_Predictor_vs_Top_100.png", width=480, height=480, bg="White")
dev.off()
dev.copy(pdf, file="Hit_Predictor_vs_Top_100.pdf", bg="White")
dev.off()
#Plot #3: Does the billboard top trending list predict future hits on the billboard hot 100?
df3 <- read.csv('billboardtoptrending_vs_billboardhot100.csv', header=T) # Read csv file into data frame
numHits <- length(which(df3$hit==1))
numNotHits <- length(which(df3$hit==2))
hitData <- c(numHits,numNotHits)
pct <- round(hitData/sum(hitData)*100)
hitLabels <- c('Hit','Not a hit')
hitLabels <- paste(hitLabels, pct)
hitLabels <- paste(hitLabels, "%",sep="")
colors <- c("forestgreen","firebrick")
pie(hitData, labels = hitLabels, col = colors
,main = "Figure 4: Percent of Billboard Top Trending in \nBillboard Hot 100"
,cex = 1.2
,cex.main = 1)
dev.copy(png, file="Top_Trending_vs_Top_100.png", width=480, height=480, bg="White")
dev.off()
dev.copy(pdf, file="Top_Trending_vs_Top_100.pdf", bg="White")
dev.off()
#-----------PART 2: MAP OF ARTISTS' HOMETOWNS-----------------------------
library(ggmap)
# Need list of singers and their hometowns
mydata = read.csv("location.csv", header=FALSE, stringsAsFactors=FALSE)
locn <- mydata$V2
locn_coords <- geocode(locn, source="google")
where.df <- data.frame(locn=mydata$V1)
myLocs <- data.frame(where.df, locn_coords)
# Get the map
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50", boundary=TRUE)
mp <- ggplot() + mapWorld
# Layer the cities on top
mp <- mp+ geom_point(data = myLocs, aes(x=lon, y=lat, colour
= locn), jitter=TRUE, size=4,
alpha=0.8)
mp
dev.copy(png, file="Artist_Map.png", width=720, height=480, bg="White")
dev.off()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
#Plot #1: How do Billboard Hot 100 rankings correlate with Shazam Top 100 rankings?
df1 <- read.csv('billboardhot100_vs_shazamtop100.csv', header=T) # Read csv file into data frame
x <- df1$billboard_rank
y <- df1$shazam_rank
# Source of linear equation label on plot with r-squared coefficient: http://goo.gl/K4yh and
# http://stackoverflow.com/questions/7549694/ggplot2-adding-regression-line-equation-and-r2-on-graph
# This code calculates equation of the line for use in the plot
lm_eqn <- function(df1){
m <- lm(y ~ x, df1);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
# Plot correlation of Billboard song rank (x-axis) vs. Shazam song rank (y-axis)
s1 = 10    # Size of point labels in plot
s2 = 2     # Size of points themselves
s3 = 3     # Size of equation in plot
ggplot(df1, aes(x=billboard_rank, y=shazam_rank, label=song))+
geom_point(aes(color=artist), size=s2)+
geom_text(aes(label=song, color=artist, size=s1),hjust=-0.15, vjust=0.5)+
geom_text(aes(label=artist, color=artist, size=s1),hjust=-0.15, vjust=-.5)+
geom_text(aes(label=paste0('(',billboard_rank,',',shazam_rank,')'), color=artist,
size=s1, hjust=1.3, vjust=0))+
geom_text(x = 4, y = 22, label = lm_eqn(df1), color='blue', size=s3, parse = TRUE)+
labs(title="Figure 2: Billboard Hot 100 vs. Shazam Top 100")+
labs(x="Billboard Song Rank", y="Shazam Song Rank")+
geom_smooth(method="lm", fullrange=TRUE, size=.5, se=TRUE, level=.95, alpha=0.18)+
theme_bw()+
xlim(-5, 50)+
ylim(-5, 45)+
theme(legend.position="none")
dev.copy(png, file="BillboardHot100_vs_ShazamTop100.png", width=480, height=480, bg="White")
dev.off()
dev.copy(pdf, file="BillboardHot100_vs_ShazamTop100.pdf", bg="White")
dev.off()
setwd('/home/vagrant/Programming_For_Analytics/Homework/Group_Project_Final_changed')
library(shiny)
runApp()
